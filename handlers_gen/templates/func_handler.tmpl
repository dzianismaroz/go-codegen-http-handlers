/*
    author: Dzianis Maroz
    warning: Automatically generated. Do not edit

 */

package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

const (
    validAuthToken = "100500"
    authHeader = "X-Auth"
    errorResponsePattern = "{\"error\":\"\", \"response\":%s}"
)

func isAuthorized(r *http.Request) bool {
	return r.Header.Get(authHeader) == validAuthToken
}

func handleError(w http.ResponseWriter, apiError *ApiError) {
	http.Error(w, fmt.Sprintf("{\"error\":\"%s\"}", apiError.Err.Error()), apiError.HTTPStatus)
}

func produceBadRequest( reason string) *ApiError{
    return &ApiError{Err: errors.New(reason), HTTPStatus: http.StatusBadRequest}
}

// ------------------- HTTP handlers --------------------
{{ if .}}
 {{range $k , $v :=  . -}}

{{- range $i, $api := $v}}
func (h *{{$k}} ) execute{{$api.Target.Name.Name}}(w http.ResponseWriter, r *http.Request) {
 {{- if ne $api.Method  "" }}
        if r.Method != "{{$api.Method}}" {
            handleError(w, &ApiError{Err: errors.New("bad method"), HTTPStatus: http.StatusNotAcceptable})
            return
        }
        {{- end}}
        {{- if $api.Auth }}
        if !isAuthorized(r) {
            handleError(w, &ApiError{Err: errors.New("unauthorized"), HTTPStatus: http.StatusForbidden})
            return
        }
        {{- end}}
        params := {{$api.ArgType}}{}
	    errApi := params.extractParams(r)
        if errApi != nil {
            handleError(w, errApi)
            return
        }
        user, err := h.{{$api.Target.Name.Name}}(r.Context(), params)

        if err != nil {
            var apiError ApiError

            if errors.As(err, &apiError) {
                handleError(w, &apiError)
                return
            } else {
                handleError(w, &ApiError{Err: err, HTTPStatus: http.StatusInternalServerError})
                return
            }
        }

        w.WriteHeader(http.StatusOK)
	    bytes, _ := json.Marshal(user)
	    w.Write([]byte(fmt.Sprintf(errorResponsePattern, bytes)))
	    return
	}
{{- end}}

func (h *{{$k}} ) ServeHTTP(w http.ResponseWriter, r *http.Request) {
    switch r.URL.Path {
        {{- range $i, $api := $v}}
    case "{{$api.Url}}":
        h.execute{{$api.Target.Name.Name}}(w, r)
        {{- end}}
    default:
       handleError(w, &ApiError{Err: errors.New("unknown method"), HTTPStatus: http.StatusNotFound})
    }
}
 {{ end}}
{{ end}}
